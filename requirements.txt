1) Регистрации пользователей в системе (менеджеры и обычные пользователи).
/v1/users/
Выполнено: @PostMapping("/root") public void createRootUser() - создание ROOT пользователя
           @PostMapping public void createUser(@RequestBody UserCreationDto userCreationDto)

           @GetMapping public List<UserDto> getAll(@RequestBody(required = false) UserSelectionDto selectionModel,
               @RequestParam(value = "orderBy", defaultValue = "id", required = false) String orderBy,
               @RequestParam(value = "asc", defaultValue = "true", required = false) boolean asc,
               @RequestParam(value = "limit", defaultValue = "10", required = false) Integer limit)
           @GetMapping(value = "/{id}") public UserDto getById(@PathVariable("id") Long id)
           @GetMapping(value = "/my") public UserDto getUserByAuth(@AuthenticationPrincipal UserDetailsImpl userDetails)

2) Редактирования личной информации пользователя.
/v1/users/
Выполнено: @PatchMapping(value = "/{id}", params = {"role"}) public void updateUserRoleById(@PathVariable("id") Long id,
               @RequestParam(value = "role") String role)
           @PatchMapping(value = "/{id}") public void updateUserById(@PathVariable("id") Long id,
               @RequestBody UserUpdateDto userUpdateDto)
           @PatchMapping(value = "/my") public void updateUserByAuth(@AuthenticationPrincipal UserDetailsImpl userDetails,
               @RequestBody UserUpdateDto userUpdateDto)

           @PatchMapping(value = "/{id}/credentials") public void updateUserCredentialsById(@PathVariable Long id,
               @RequestBody UserCredentialsUpdateDto credentialsUpdateDto)
           @PatchMapping(value = "/{id}/tariff", params = {"tariff-id"}) public void updateUserTariffById(@PathVariable Long id,
               @RequestParam(value = "tariff-id") Long tariffId)
           @PatchMapping(value = "/{id}/subscription", params = {"subscription-id"}) public void updateUserSubscriptionById(@PathVariable Long id,
               @RequestParam(value = "subscription-id") Long subscriptionId)
           @PatchMapping(value = "/my/credentials") public void updateUserCredentialsByAuth(@AuthenticationPrincipal UserDetailsImpl userDetails,
               @RequestBody UserCredentialsUpdateDto credentialsUpdateDto)
           @PatchMapping(value = "/my/tariff", params = {"tariff-id"}) public void updateUserTariffByAuth(
               @AuthenticationPrincipal UserDetailsImpl userDetails,
               @RequestParam(value = "tariff-id") Long tariffId)
           @PatchMapping(value = "/my/subscription", params = {"subscription-id"}) public void updateUserSubscriptionByAuth(
               @AuthenticationPrincipal UserDetailsImpl userDetails,
               @RequestParam(value = "subscription-id") Long subscriptionId)

3) Иерархический список точек проката с географической привязкой.
Пояснение от куратора: "Иерархическое имеется в виду страна Беларусь, область Гродненская, город Гродно, улица такая-то.
Короче чтобы можно было спускаться от Беларуси до улицы."
/v1/rental-points
Выполнено: @GetMapping public List<RentalPointDto> getAll(@RequestBody(required = false) GeolocationSelectionDto selectionModel,
               @RequestParam(value = "orderBy", defaultValue = "id", required = false) String orderBy,
               @RequestParam(value = "asc", defaultValue = "true", required = false) boolean asc,
               @RequestParam(value = "limit", defaultValue = "10", required = false) Integer limit
           @GetMapping(params = {"lat", "lng"}) public List<RentalPointDto> getAll(
               @RequestParam(value = "lat") Double lat, @RequestParam(value = "lng") Double lng,
               @RequestParam(value = "limit", defaultValue = "10", required = false) Integer limit

4) Возможность добавления / удаления / редактирования самокатов и точек проката.
/v1/rental-points
Выполнено: @PostMapping public void createRentalPoint(@RequestBody RentalPointCreationDto rentalPointCreationDto)
           @PostMapping(params = {"lat", "lng"}) public void createRentalPoint(
                @RequestParam(value = "lat") Double lat,
                @RequestParam(value = "lng") Double lng,
                @RequestParam(value = "desc", defaultValue = "", required = false) String desc)
           @PatchMapping(value = "/{id}") public void updateGeolocationOfRentalPoint(@PathVariable("id") Long id,
                @RequestBody GeolocationUpdateDto updateModel)
           @DeleteMapping(value = "/{id}") public void deleteRentalPoint(@PathVariable("id") Long id)

/v1/scooters
Выполнено: @GetMapping(value = "/{id}") public ScooterDto getById(@PathVariable("id") Long id)
           @GetMapping public List<ScooterDto> getAll(
                @RequestParam(value = "orderBy", defaultValue = "id", required = false) String orderBy,
                @RequestParam(value = "asc", defaultValue = "true", required = false) boolean asc,
                @RequestParam(value = "limit", defaultValue = "10", required = false) Integer limit)
           @PostMapping public void createScooter(@RequestBody ScooterCreationDto scooterCreationDto)
           @PatchMapping(value = "/{id}") public void updateScooter(@PathVariable("id") Long id, @RequestBody ScooterUpdateDto updateDto)
           @PatchMapping(value = "/{id}", params = {"model-id"}) public void updateScooterModel(@PathVariable("id") Long id,
               @RequestParam(value = "model-id") Long modelId)
           @PatchMapping(value = "/{id}", params = {"rental-point-id"}) public void updateScooterRentalPoint(@PathVariable("id") Long id,
               @RequestParam(value = "rental-point-id") Long rentalPointId)
           @DeleteMapping(value = "/{id}") public void deleteScooter(@PathVariable("id") Long id)

5) Просмотр детальной информации о точке проката (наличие самокатов, т.е. их количество и модельный ряд, их состояние).
/v1/rental-points
Выполнено: @GetMapping(value = "/{id}") public RentalPointDto getById(@PathVariable("id") Long id)

6) Тарификация использования самокатов (почасовая, абонементная, возможность назначить цену и/или скидку).
/v1/tariffs
Выполнено: @GetMapping("/{id}") public TariffDto getTariffById(@PathVariable Long id)
           @GetMapping public List<TariffDto> getAllTariffs()
           @PostMapping public void createTariff(@RequestBody TariffCreationDto creationDto)
           @PatchMapping("/{id}") public void updateTariff(@PathVariable Long id, @RequestBody TariffUpdateDto updateDto)
           @DeleteMapping(value = "/{id}") public void deleteTariff(@PathVariable("id") Long id)

/v1/subscriptions
Выполнено: @GetMapping("/{id}") public SubscriptionDto getSubscriptionById(@PathVariable Long id)
           @GetMapping public List<SubscriptionDto> getAllSubscription()
           @PostMapping public void createSubscription(@RequestBody SubscriptionCreationDto creationDto)
           @PatchMapping("/{id}") public void updateModelsForSubscription(@PathVariable Long id, @RequestBody SubscriptionUpdateDto updateDto)
           @DeleteMapping(value = "/{id}") public void deleteSubscription(@PathVariable("id") Long id)

7) Возможность аренды самоката пользователем по часовому тарифу либо на абонементной основе.
/v1/rides/
Выполнено: @PostMapping(value = "/my", params = {"scooter-id", "payment"}) public RideDto createRide(
               @AuthenticationPrincipal UserDetailsImpl userDetails,
               @RequestParam("scooter-id") Long scooterId, @RequestParam("payment") String payment)
           @PutMapping(value = "/my/pending/{ride-id}") public void startRide(
               @AuthenticationPrincipal UserDetailsImpl userDetails,
               @PathVariable("ride-id") Long rideId)
           @PutMapping(value = "/my/active/{ride-id}", params = {"rental-point-id", "mileage", "charge"}) public void endRide(
               @AuthenticationPrincipal UserDetailsImpl userDetails,
               @PathVariable("ride-id") Long rideId,
               @RequestParam("rental-point-id") Long rentalPointId, @RequestParam("mileage") Double mileage, @RequestParam("charge") Double charge)

8) Просмотр истории аренды конкретного самоката администратором (кто, когда, пробег и д.р.)
/v1/rides/
Выполнено: @GetMapping(params = {"scooter-id"}) public List<RideDto> getScooterRidesById(@RequestParam("scooter-id") Long scooterId,
               @RequestParam(value = "firstStartTime", defaultValue = "first", required = false)
               @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime firstStartTime,
               @RequestParam(value = "lastEndTime", defaultValue = "last", required = false)
               @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime lastEndTime)
               // firstStartTime=2022-09-12T00:00
           @GetMapping(params = {"user-id", "status"}) public List<RideDto> getUserRidesById(@RequestParam("user-id") Long userId,
               @RequestParam("status") String status,
               @RequestParam(value = "limit", defaultValue = "10", required = false) Integer limit)

9) История аренды для клиента.
/v1/rides/
Выполнено: @GetMapping("my/{status}") public List<RideDto> getRidesByAuth(@AuthenticationPrincipal UserDetailsImpl userDetails,
               @PathVariable("status") String status,
               @RequestParam(value = "limit", defaultValue = "10", required = false) Integer limit)

Разграничение доступа к эндпоинтам:
                .antMatchers(HttpMethod.POST, "/v1/login").permitAll()

                .antMatchers(HttpMethod.GET, "/v1/rental-points/**").authenticated()
                .antMatchers(HttpMethod.POST, "/v1/rental-points/**").hasAnyAuthority(ADMIN.name(), ROOT.name())
                .antMatchers(HttpMethod.PATCH, "/v1/rental-points/**").hasAnyAuthority(ADMIN.name(), ROOT.name())
                .antMatchers(HttpMethod.DELETE, "/v1/rental-points/**").hasAnyAuthority(ADMIN.name(), ROOT.name())

                .antMatchers("/v1/scooters/**").hasAnyAuthority(MANAGER.name(), ADMIN.name(), ROOT.name())

                .antMatchers(HttpMethod.POST, "/v1/users/root", "/v1/users").permitAll()
                .antMatchers("/v1/users/my/**").authenticated()
                .antMatchers(HttpMethod.GET, "/v1/users/**").hasAnyAuthority(MANAGER.name(), ADMIN.name(), ROOT.name())
                .antMatchers(HttpMethod.PATCH, "/v1/users/{id}/**").hasAnyAuthority(ADMIN.name(), ROOT.name())

                .antMatchers(HttpMethod.GET, "/v1/tariffs/**").authenticated()
                .antMatchers(HttpMethod.POST, "/v1/tariffs/**").hasAnyAuthority(ADMIN.name(), ROOT.name())
                .antMatchers(HttpMethod.PATCH, "/v1/tariffs/**").hasAnyAuthority(ADMIN.name(), ROOT.name())

                .antMatchers(HttpMethod.GET, "/v1/subscriptions/**").authenticated()
                .antMatchers(HttpMethod.POST, "/v1/subscriptions/**").hasAnyAuthority(ADMIN.name(), ROOT.name())
                .antMatchers(HttpMethod.PATCH, "/v1/subscriptions/**").hasAnyAuthority(ADMIN.name(), ROOT.name())

                .antMatchers("/v1/rides/my/**").authenticated()
                .antMatchers("/v1/rides/**").hasAnyAuthority(MANAGER.name(), ADMIN.name(), ROOT.name())